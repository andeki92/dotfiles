---
description: 
globs: *.zsh
alwaysApply: false
---
# Zsh Configuration Guidelines

## Overview

This document describes the structure and best practices for managing Zsh configuration in a modular, XDG-compliant dotfiles repository. **Speed is a key priority** - we strongly prefer lazy loading for all non-essential functionality.

## File Structure and Load Order

Zsh config files are organized by directory and numeric prefix to clarify load order:

| Number | Purpose/Type                | Example Filename(s)           | Description                                 |
|--------|-----------------------------|-------------------------------|---------------------------------------------|
| 00-09  | Core/Eager (always loaded)  | 00-platform.zsh, 05-env.zsh   | Platform, env, XDG, path, no-defer          |
| 10-19  | Plugin Loader(s)            | 10-brew.zsh, 15-defer.zsh     | Homebrew, zsh-defer, plugin managers        |
| 20-39  | Eager Shell Features        | 20-history.zsh, 30-prompt.zsh | History, prompt, minimal completions        |
| 40-69  | Lazy/Deferred Plugins       | lazy/40-completion.zsh        | fzf, starship, zsh-completions             |
| 90-99  | Aliases (always last)       | 90-aliases.zsh                | Aliases, loaded after everything else       |

## Example Directory Structure

```
config/zsh/
├── .config/
│   └── zsh/
│       ├── 00-platform.zsh
│       ├── 05-no-defer.zsh
│       ├── 10-brew.zsh
│       ├── 15-defer.zsh             # Loads zsh-defer plugin
│       ├── 20-history.zsh
│       ├── 30-prompt.zsh
│       ├── 90-aliases.zsh
│       ├── plugins/
│       │   └── zsh-defer/           # The defer plugin itself
│       │       └── zsh-defer.zsh
│       └── lazy/                    # Directory for all deferred loading
│           ├── 40-completion.zsh
│           └── ...
└── README.md
```

## Loader Example

In your `.zshrc` or main entrypoint:

```zsh
# Load eager files
for file in $XDG_CONFIG_HOME/zsh/*.zsh(N); do
  source "$file"
done

# Load lazy files
for file in $XDG_CONFIG_HOME/zsh/lazy/*.zsh(N); do
  source "$file"
done
```

## Lazy Loading for Speed

Zsh startup time is critical for a responsive terminal experience. We use [zsh-defer](mdc:https:/github.com/romkatv/zsh-defer) to postpone loading non-essential functionality until after the prompt appears:

```zsh
# In 15-defer.zsh
source $ZDOTDIR/plugins/zsh-defer/zsh-defer.zsh

# In lazy/40-completion.zsh
zsh-defer source $ZDOTDIR/completions/_docker
zsh-defer -c 'eval "$(starship init zsh)"'
```

### What to Defer/Lazy Load

- **Completions**: All completion systems and individual completions
- **Prompts**: Complex prompt systems like starship, powerlevel10k
- **Directory navigation**: Tools like z, zoxide, autojump
- **Syntax highlighting**: zsh-syntax-highlighting, fast-syntax-highlighting
- **History management**: Advanced history tools
- **Any plugin that doesn't affect core shell behavior**

### What NOT to Defer

- **Environment variables**: PATH, XDG_*, etc.
- **Core aliases** needed immediately
- **Platform detection** logic
- **Critical functions** used by other startup scripts

## Best Practices

- **Eager files**: Only include what's absolutely needed for shell startup
- **Lazy files**: Use `zsh-defer` for everything else to improve startup time
- **Aliases**: Always load last, after all functions and plugins
- **XDG compliance**: All config files under `$XDG_CONFIG_HOME/zsh/`
- **Version control**: All plugins and custom scripts in dotfiles repo
- **Modularity**: Each file has clear numeric prefix
- **Benchmarking**: Regularly test startup time (see [006-benchmarking.mdc](mdc:.cursor/rules/006-benchmarking.mdc))

## Updating the Configuration

- Choose numeric prefixes based on file type (see table above)
- Add new plugins to `plugins/` and load with `zsh-defer` in a `lazy/` file
- Keep README up to date with structural changes
- Always consider if new functionality can be deferred

## References
- [zsh-defer on GitHub](mdc:https:/github.com/romkatv/zsh-defer)
- [Fast Zsh Startup Guide](mdc:https:/htr3n.github.io/2018/07/faster-zsh)
